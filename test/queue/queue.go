// Code generated by goctl. DO NOT EDIT.
// Source: queque.proto

package queue

import (
	"context"

	"rabbitmq-demo/test/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	TestDelayReq  = pb.TestDelayReq
	TestDelayResp = pb.TestDelayResp
	TestReq       = pb.TestReq
	TestResp      = pb.TestResp

	Queue interface {
		// 创建消息队列
		TestQueue(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error)
		// 延迟队列
		TestDelay(ctx context.Context, in *TestDelayReq, opts ...grpc.CallOption) (*TestDelayResp, error)
	}

	defaultQueue struct {
		cli zrpc.Client
	}
)

func NewQueue(cli zrpc.Client) Queue {
	return &defaultQueue{
		cli: cli,
	}
}

// 创建消息队列
func (m *defaultQueue) TestQueue(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestResp, error) {
	client := pb.NewQueueClient(m.cli.Conn())
	return client.TestQueue(ctx, in, opts...)
}

// 延迟队列
func (m *defaultQueue) TestDelay(ctx context.Context, in *TestDelayReq, opts ...grpc.CallOption) (*TestDelayResp, error) {
	client := pb.NewQueueClient(m.cli.Conn())
	return client.TestDelay(ctx, in, opts...)
}
